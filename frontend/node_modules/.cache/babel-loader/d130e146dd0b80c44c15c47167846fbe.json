{"ast":null,"code":"var _jsxFileName = \"D:\\\\frontend\\\\React\\\\vk(api)\\\\youtube2022\\\\frontend\\\\src\\\\components\\\\comments\\\\Comments.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport './comments.scss';\nimport { Link } from 'react-router-dom';\nimport { AuthContext } from '../../context/authContext';\nimport Comment from '../comment/Comment';\nimport { useQuery, useMutation, useQueryClient, isError } from '@tanstack/react-query';\nimport { addRequest } from '../../axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    postId\n  } = _ref;\n  const [desc, setDesc] = useState('');\n  const {\n    currentUser\n  } = useContext(AuthContext);\n\n  const fetchComments = async () => {\n    const {\n      res\n    } = await addRequest.get(`/comments?postId=${postId}`).then(res => {\n      return res.data;\n    });\n  };\n\n  const createComment = async () => {\n    const {\n      res\n    } = await addRequest.post('/comments', newComment).then(res => {\n      return res.data;\n    });\n  };\n\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isLoading,\n    isError\n  } = useQuery(['comments'], fetchComments);\n  const mutation = useMutation(newComment => {\n    return addRequest.post('/comments', newComment);\n  }, {\n    onSuccess: () => {\n      queryClient.invalidateQueries(['comments']);\n    }\n  });\n\n  const handleClick = async e => {\n    e.preventDefault();\n    mutation.mutate({\n      desc,\n      postId\n    });\n    setDesc('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"write\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: '/upload/' + currentUser.profilePic,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: desc,\n        placeholder: \"write a comment\",\n        onChange: e => setDesc(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        children: \"Add comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this) : isError ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Errors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this) : data.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 33\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"p9M6qzRXkX1298ZLByMZCclZnGs=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["D:/frontend/React/vk(api)/youtube2022/frontend/src/components/comments/Comments.jsx"],"names":["React","useContext","useState","Link","AuthContext","Comment","useQuery","useMutation","useQueryClient","isError","addRequest","Comments","postId","desc","setDesc","currentUser","fetchComments","res","get","then","data","createComment","post","newComment","queryClient","isLoading","mutation","onSuccess","invalidateQueries","handleClick","e","preventDefault","mutate","profilePic","target","value","map","comment"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport './comments.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/authContext';\r\nimport Comment from '../comment/Comment';\r\nimport { useQuery, useMutation, useQueryClient, isError } from '@tanstack/react-query';\r\nimport { addRequest } from '../../axios';\r\n\r\nconst Comments = ({ postId }) => {\r\n  const [desc, setDesc] = useState('');\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  const fetchComments = async () => {\r\n    const { res } = await addRequest.get(`/comments?postId=${postId}`).then((res) => {\r\n      return res.data;\r\n    });\r\n  };\r\n\r\n  const createComment = async () => {\r\n    const { res } = await addRequest.post('/comments', newComment).then((res) => {\r\n      return res.data;\r\n    });\r\n  };\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const { data, isLoading, isError } = useQuery(['comments'], fetchComments);\r\n\r\n  const mutation = useMutation(\r\n    (newComment) => {\r\n      return addRequest.post('/comments', newComment);\r\n    },\r\n    {\r\n      onSuccess: () => {\r\n        queryClient.invalidateQueries(['comments']);\r\n      },\r\n    },\r\n  );\r\n\r\n  const handleClick = async (e) => {\r\n    e.preventDefault();\r\n    mutation.mutate({ desc, postId });\r\n    setDesc('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"comments\">\r\n      <div className=\"write\">\r\n        <img src={'/upload/' + currentUser.profilePic} alt=\"\" />\r\n        <input\r\n          type=\"text\"\r\n          value={desc}\r\n          placeholder=\"write a comment\"\r\n          onChange={(e) => setDesc(e.target.value)}></input>\r\n        <button onClick={handleClick}>Add comment</button>\r\n        {isLoading ? (\r\n          <h3>Loading</h3>\r\n        ) : isError ? (\r\n          <h3>Errors</h3>\r\n        ) : (\r\n          data.map((comment) => <Comment comment={comment} />)\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Comments;\r\n"]},"metadata":{},"sourceType":"module"}